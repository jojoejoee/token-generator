{"remainingRequest":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\routes\\terms\\bep20-generator-terms.md?vue&type=template&id=11358c14&","dependencies":[{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\routes\\terms\\bep20-generator-terms.md","mtime":1638045277243},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDInLHthdHRyczp7ImlkIjoidGVybXMtb2YtdXNlIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjdGVybXMtb2YtdXNlIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFRlcm1zIG9mIFVzZSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkJFUDIwIFRva2VuIEdlbmVyYXRvciBpcyBhIGRpc3RyaWJ1dGVkIGFwcGxpY2F0aW9uIHRoYXQgcnVucyBvbiB0aGUgQmluYW5jZSBTbWFydCBDaGFpbiwgdXNpbmcgc3BlY2lhbGx5LWRldmVsb3BlZCBTbWFydCBDb250cmFjdHMgdG8gZW5hYmxlIHVzZXJzIHRvIGJ1aWxkIHRoZWlyIEJFUDIwIFRva2Vucy5cblRoZSBTbWFydCBDb250cmFjdHMsIGFuZCB0aGUgU2l0ZSwgYXJlIGNvbGxlY3RpdmVseSByZWZlcnJlZCB0byBpbiB0aGVzZSBUZXJtcyBhcyB0aGUgXCJBcHBcIi4iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWJsb2NrIHdhcm5pbmcifSxbX2MoJ3AnLHtzdGF0aWNDbGFzczoiY3VzdG9tLWJsb2NrLXRpdGxlIn0sW192bS5fdigiRElTQ0xBSU1FUiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkJFUDIwIFRva2VuIEdlbmVyYXRvciBhbmQgaXRzIGF1dGhvciBhcmUgZnJlZSBvZiBhbnkgbGlhYmlsaXR5IHJlZ2FyZGluZyBUb2tlbnMgYnVpbHQgdXNpbmcgdGhpcyBBcHAsIGFuZCB0aGUgdXNlIHRoYXQgaXMgbWFkZSBvZiB0aGVtLlxuVG9rZW5zIGJ1aWx0IG9uIEJFUDIwIFRva2VuIEdlbmVyYXRvciwgdGhlaXIgcHJvamVjdHMsIHRoZWlyIHRlYW1zLCB0aGVpciB1c2Ugb2YgVG9rZW4gKGFzIHdlbGwgYXMgYW55dGhpbmcgcmVsYXRlZCB0byBUb2tlbikgYXJlIGluIG5vIHdheSBjb25uZWN0ZWQgdG8gQkVQMjAgVG9rZW4gR2VuZXJhdG9yIG9yIGl0cyBhdXRob3IuIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiQkVQMjAgVG9rZW4gR2VuZXJhdG9yJ3MgY29kZSBpcyBwcm92aWRlZCB1bmRlciBNSVQgTGljZW5zZS4gQW55b25lIGNhbiB1c2UgaXQgYXMgcGVyIHRoZWlyIG5lZWRzLlxuVGhlIEFwcCdzIHB1cnBvc2UgaXMgdG8gbWFrZSBwZW9wbGUgYWJsZSB0byB0b2tlbml6ZSB0aGVpciBpZGVhcyB3aXRob3V0IGNvZGluZyBvciBwYXlpbmcgbGFyZ2UgYW1vdW50cyBmb3IgaXQuXG5Tb3VyY2UgY29kZSBpcyBwdWJsaWMgYW5kIHdlbGwgdGVzdGVkIGFuZCBjb250aW51b3VzbHkgdXBkYXRlZCB0byByZWR1Y2UgcmlzayBvZiBidWdzIGFuZCBpbnRyb2R1Y2UgbGFuZ3VhZ2Ugb3B0aW1pemF0aW9ucy5cbkFueXdheSB0aGUgcHVyY2hhc2Ugb2YgdG9rZW5zIGludm9sdmVzIGEgaGlnaCBkZWdyZWUgb2Ygcmlzay5cbkJlZm9yZSBhY3F1aXJpbmcgdG9rZW5zLCBpdCBpcyByZWNvbW1lbmRlZCB0byBjYXJlZnVsbHkgd2VpZ2hzIGFsbCB0aGUgaW5mb3JtYXRpb24gYW5kIHJpc2tzIGRldGFpbGVkIGluIFRva2VuIG93bmVyJ3MgQ29uZGl0aW9ucy4iKV0pXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6InRoZS1hcHAifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiN0aGUtYXBwIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFRoZSBBcHAiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJUbyBtb3N0IGVhc2lseSB1c2UgdGhlIEFwcCwgeW91IG11c3QgZmlyc3QgaW5zdGFsbCBhIGJyb3dzZXIgZXh0ZW5zaW9uIGNhbGxlZCBNZXRhTWFzay5cbk1ldGFNYXNrIGlzIGFuIGVsZWN0cm9uaWMgd2FsbGV0LCB3aGljaCBhbGxvd3MgeW91IHRvIHB1cmNoYXNlLCBzdG9yZSwgYW5kIGVuZ2FnZSBpbiB0cmFuc2FjdGlvbnMgdXNpbmcgQk5CIGNyeXB0b2N1cnJlbmN5LlxuWW91IHdpbGwgbm90IGJlIGFibGUgdG8gZW5nYWdlIGluIGFueSB0cmFuc2FjdGlvbnMgb24gdGhlIEFwcCBvdGhlciB0aGFuIHRocm91Z2ggTWV0YU1hc2suXG5UcmFuc2FjdGlvbnMgdGhhdCB0YWtlIHBsYWNlIG9uIHRoZSBBcHAgYXJlIG1hbmFnZWQgYW5kIGNvbmZpcm1lZCB2aWEgdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4uIFlvdSB1bmRlcnN0YW5kIHRoYXQgeW91ciBCTkIgcHVibGljIGFkZHJlc3Mgd2lsbCBiZSBtYWRlIHB1YmxpY2x5IHZpc2libGUgd2hlbmV2ZXIgeW91IGVuZ2FnZSBpbiBhIHRyYW5zYWN0aW9uIG9uIHRoZSBBcHAuXG5XZSBuZWl0aGVyIG93biBub3IgY29udHJvbCBNZXRhTWFzaywgdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4sIG9yIGFueSBvdGhlciB0aGlyZCBwYXJ0eSBzaXRlLCBwcm9kdWN0LCBvciBzZXJ2aWNlIHRoYXQgeW91IG1pZ2h0IGFjY2VzcywgdmlzaXQsIG9yIHVzZSBmb3IgdGhlIHB1cnBvc2Ugb2YgZW5hYmxpbmcgeW91IHRvIHVzZSB0aGUgdmFyaW91cyBmZWF0dXJlcyBvZiB0aGUgQXBwLlxuV2Ugd2lsbCBub3QgYmUgbGlhYmxlIGZvciB0aGUgYWN0cyBvciBvbWlzc2lvbnMgb2YgYW55IHN1Y2ggdGhpcmQgcGFydGllcywgbm9yIHdpbGwgd2UgYmUgbGlhYmxlIGZvciBhbnkgZGFtYWdlIHRoYXQgeW91IG1heSBzdWZmZXIgYXMgYSByZXN1bHQgb2YgeW91ciB0cmFuc2FjdGlvbnMgb3IgYW55IG90aGVyIGludGVyYWN0aW9uIHdpdGggYW55IHN1Y2ggdGhpcmQgcGFydGllcy4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJmZWVzLWFuZC1wYXltZW50In19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZmVlcy1hbmQtcGF5bWVudCJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBGZWVzIGFuZCBQYXltZW50IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiSWYgeW91IGVsZWN0IHRvIGJ1aWxkIGEgQkVQMjAgVG9rZW4gb24gdGhlIEFwcCwgb3Igd2l0aCBvciBmcm9tIG90aGVyIHVzZXJzIHZpYSB0aGUgQXBwLCBhbnkgZmluYW5jaWFsIHRyYW5zYWN0aW9ucyB0aGF0IHlvdSBlbmdhZ2UgaW4gd2lsbCBiZSBjb25kdWN0ZWQgc29sZWx5IHRocm91Z2ggdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4gdmlhIE1ldGFNYXNrLlxuV2Ugd2lsbCBoYXZlIG5vIGluc2lnaHQgaW50byBvciBjb250cm9sIG92ZXIgdGhlc2UgcGF5bWVudHMgb3IgdHJhbnNhY3Rpb25zLCBub3IgZG8gd2UgaGF2ZSB0aGUgYWJpbGl0eSB0byByZXZlcnNlIG9yIHJlZnVuZCBhbnkgdHJhbnNhY3Rpb25zLlxuV2l0aCB0aGF0IGluIG1pbmQsIHdlIHdpbGwgaGF2ZSBubyBsaWFiaWxpdHkgdG8geW91IG9yIHRvIGFueSB0aGlyZCBwYXJ0eSBmb3IgYW55IGNsYWltcyBvciBkYW1hZ2VzIHRoYXQgbWF5IGFyaXNlIGFzIGEgcmVzdWx0IG9mIGFueSB0cmFuc2FjdGlvbnMgdGhhdCB5b3UgZW5nYWdlIGluIHZpYSB0aGUgQXBwLCBvciB1c2luZyB0aGUgU21hcnQgQ29udHJhY3RzLCBvciBhbnkgb3RoZXIgdHJhbnNhY3Rpb25zIHRoYXQgeW91IGNvbmR1Y3QgdmlhIHRoZSBCaW5hbmNlIFNtYXJ0IENoYWluIG9yIE1ldGFNYXNrLlxuQmluYW5jZSBTbWFydCBDaGFpbiByZXF1aXJlcyB0aGUgcGF5bWVudCBvZiBhIHRyYW5zYWN0aW9uIGZlZSAoYSDigJxHYXMgRmVl4oCdKSBmb3IgZXZlcnkgdHJhbnNhY3Rpb24gdGhhdCBvY2N1cnMgb24gdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4uIFRoZSBHYXMgRmVlIGZ1bmRzIHRoZSBuZXR3b3JrIG9mIGNvbXB1dGVycyB0aGF0IHJ1biB0aGUgZGVjZW50cmFsaXplZCBCaW5hbmNlIFNtYXJ0IENoYWluLiBUaGlzIG1lYW5zIHRoYXQgeW91IHdpbGwgbmVlZCB0byBwYXkgYSBHYXMgRmVlIGZvciBlYWNoIHRyYW5zYWN0aW9uIHRoYXQgb2NjdXJzIHZpYSB0aGUgQXBwLlxuSW4gYWRkaXRpb24gdG8gdGhlIEdhcyBGZWUsIGVhY2ggdGltZSB5b3UgdXRpbGl6ZSBhIFNtYXJ0IENvbnRyYWN0IHRvIGNvbmR1Y3QgYSB0cmFuc2FjdGlvbiB2aWEgdGhlIEFwcCwgeW91IGF1dGhvcml6ZSB1cyB0byBjb2xsZWN0IGEgY29tbWlzc2lvbiBvZiBhbiBhbW91bnQgb2YgQk5CIG9mIHRoZSB0b3RhbCB2YWx1ZSBvZiB0aGF0IHRyYW5zYWN0aW9uIChlYWNoLCBhIOKAnENvbW1pc3Npb27igJ0pLiBDb21taXNzaW9uIHdpbGwgYmUgcHVibGljbHkgdmlzaWJsZSBvbiB0aGUgQXBwIGNvbmZpcm1hdGlvbiBwYWdlIGFuZCBpbiBNZXRhTWFzayBjb25maXJtYXRpb24gcG9wdXAuXG5Zb3UgYWNrbm93bGVkZ2UgYW5kIGFncmVlIHRoYXQgdGhlIENvbW1pc3Npb24gd2lsbCBiZSB0cmFuc2ZlcnJlZCBkaXJlY3RseSB0byB1cyB0aHJvdWdoIHRoZSBCaW5hbmNlIFNtYXJ0IENoYWluIGFzIHBhcnQgb2YgeW91ciBwYXltZW50LlxuV2Ugd2lsbCBub3QgY29sbGVjdCBhIENvbW1pc3Npb24gZm9yIGludGVyYWN0aW9ucyB0aGF0IGRvIG5vdCBpbnZvbHZlIG91ciBBcHAuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoicmlza3MifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNyaXNrcyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBSaXNrcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIllvdSBhZ3JlZSB0aGF0IHlvdSBhcmUgcmVzcG9uc2libGUgZm9yIHlvdXIgb3duIGNvbmR1Y3Qgd2hpbGUgYWNjZXNzaW5nIG9yIHVzaW5nIHRoZSBBcHAsIGFuZCBmb3IgYW55IGNvbnNlcXVlbmNlcyB0aGVyZW9mLlxuVGhlIHByaWNlcyBvZiBibG9ja2NoYWluIGFzc2V0cyBhcmUgZXh0cmVtZWx5IHZvbGF0aWxlLiBGbHVjdHVhdGlvbnMgaW4gdGhlIHByaWNlIG9mIG90aGVyIGRpZ2l0YWwgYXNzZXRzIGNvdWxkIG1hdGVyaWFsbHkgYW5kIGFkdmVyc2VseSBhZmZlY3QgdGhlIHZhbHVlIG9mIHlvdXIgQkVQMjAgVG9rZW4sIHdoaWNoIG1heSBhbHNvIGJlIHN1YmplY3QgdG8gc2lnbmlmaWNhbnQgcHJpY2Ugdm9sYXRpbGl0eS5cbllvdSBhcmUgc29sZWx5IHJlc3BvbnNpYmxlIGZvciBkZXRlcm1pbmluZyB3aGF0LCBpZiBhbnksIHRheGVzIGFwcGx5IHRvIHlvdXIgQkVQMjAtcmVsYXRlZCB0cmFuc2FjdGlvbnMuIFdlIGFyZSBub3QgcmVzcG9uc2libGUgZm9yIGRldGVybWluaW5nIHRoZSB0YXhlcyB0aGF0IGFwcGx5IHRvIHlvdXIgdHJhbnNhY3Rpb25zIG9uIHRoZSBBcHAsIHRoZSBTaXRlLCBvciB0aGUgU21hcnQgQ29udHJhY3RzLlxuVGhlIEFwcCBkb2VzIG5vdCBzdG9yZSwgc2VuZCwgb3IgcmVjZWl2ZSBCRVAyMC4gVGhpcyBpcyBiZWNhdXNlIEJFUDIwIGV4aXN0cyBvbmx5IGJ5IHZpcnR1ZSBvZiB0aGUgb3duZXJzaGlwIHJlY29yZCBtYWludGFpbmVkIG9uIHRoZSBBcHDigJlzIHN1cHBvcnRpbmcgYmxvY2tjaGFpbiBpbiB0aGUgQmluYW5jZSBTbWFydCBDaGFpbi4gQW55IHRyYW5zZmVyIG9mIEJFUDIwIG9jY3VycyB3aXRoaW4gdGhlIHN1cHBvcnRpbmcgYmxvY2tjaGFpbiBpbiB0aGUgQmluYW5jZSBTbWFydCBDaGFpbiwgYW5kIG5vdCBvbiB0aGUgQXBwLlxuVGhlcmUgYXJlIHJpc2tzIGFzc29jaWF0ZWQgd2l0aCB1c2luZyBhbiBJbnRlcm5ldC1iYXNlZCBjdXJyZW5jeSwgaW5jbHVkaW5nLCBidXQgbm90IGxpbWl0ZWQgdG8sIHRoZSByaXNrIG9mIGhhcmR3YXJlLCBzb2Z0d2FyZSBhbmQgSW50ZXJuZXQgY29ubmVjdGlvbnMsIHRoZSByaXNrIG9mIG1hbGljaW91cyBzb2Z0d2FyZSBpbnRyb2R1Y3Rpb24sIGFuZCB0aGUgcmlzayB0aGF0IHRoaXJkIHBhcnRpZXMgbWF5IG9idGFpbiB1bmF1dGhvcml6ZWQgYWNjZXNzIHRvIGluZm9ybWF0aW9uIHN0b3JlZCB3aXRoaW4geW91ciB3YWxsZXQuIFlvdSBhY2NlcHQgYW5kIGFja25vd2xlZGdlIHRoYXQgd2Ugd2lsbCBub3QgYmUgcmVzcG9uc2libGUgZm9yIGFueSBjb21tdW5pY2F0aW9uIGZhaWx1cmVzLCBkaXNydXB0aW9ucywgZXJyb3JzLCBkaXN0b3J0aW9ucyBvciBkZWxheXMgeW91IG1heSBleHBlcmllbmNlIHdoZW4gdXNpbmcgdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4sIGhvd2V2ZXIgY2F1c2VkLlxuVGhlIHJlZ3VsYXRvcnkgcmVnaW1lIGdvdmVybmluZyBibG9ja2NoYWluIHRlY2hub2xvZ2llcywgY3J5cHRvY3VycmVuY2llcywgYW5kIHRva2VucyBpcyB1bmNlcnRhaW4sIGFuZCBuZXcgcmVndWxhdGlvbnMgb3IgcG9saWNpZXMgbWF5IG1hdGVyaWFsbHkgYWR2ZXJzZWx5IGFmZmVjdCB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlIEJFUDIwcyBlY29zeXN0ZW0sIGFuZCB0aGVyZWZvcmUgdGhlIHBvdGVudGlhbCB1dGlsaXR5IG9yIHZhbHVlIG9mIEJFUDIwcy5cblVwZ3JhZGVzIGJ5IEJpbmFuY2UgdG8gdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4sIGEgaGFyZCBmb3JrIGluIHRoZSBCaW5hbmNlIFNtYXJ0IENoYWluLCBvciBhIGNoYW5nZSBpbiBob3cgdHJhbnNhY3Rpb25zIGFyZSBjb25maXJtZWQgb24gdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4gbWF5IGhhdmUgdW5pbnRlbmRlZCwgYWR2ZXJzZSBlZmZlY3RzIG9uIGFsbCBibG9ja2NoYWlucyB1c2luZyB0aGUgQkVQMjAgc3RhbmRhcmQuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZXh0ZXJuYWwtc2l0ZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNleHRlcm5hbC1zaXRlcyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBFeHRlcm5hbCBTaXRlcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoZSBBcHAgbWF5IGluY2x1ZGUgaHlwZXJsaW5rcyB0byBvdGhlciB3ZWJzaXRlcyBvciByZXNvdXJjZXMgKGNvbGxlY3RpdmVseSwg4oCcRXh0ZXJuYWwgU2l0ZXPigJ0pLCB3aGljaCBhcmUgcHJvdmlkZWQgc29sZWx5IGFzIGEgY29udmVuaWVuY2UgdG8gb3VyIHVzZXJzLlxuV2UgaGF2ZSBubyBjb250cm9sIG92ZXIgYW55IEV4dGVybmFsIFNpdGVzLiBZb3UgYWNrbm93bGVkZ2UgYW5kIGFncmVlIHRoYXQgd2UgYXJlIG5vdCByZXNwb25zaWJsZSBmb3IgdGhlIGF2YWlsYWJpbGl0eSBvZiBhbnkgRXh0ZXJuYWwgU2l0ZXMsIGFuZCB0aGF0IHdlIGRvIG5vdCBlbmRvcnNlIGFueSBhZHZlcnRpc2luZywgcHJvZHVjdHMgb3Igb3RoZXIgbWF0ZXJpYWxzIG9uIG9yIG1hZGUgYXZhaWxhYmxlIGZyb20gYW55IEV4dGVybmFsIFNpdGVzLlxuRnVydGhlcm1vcmUsIHlvdSBhY2tub3dsZWRnZSBhbmQgYWdyZWUgdGhhdCB3ZSBhcmUgbm90IGxpYWJsZSBmb3IgYW55IGxvc3Mgb3IgZGFtYWdlIHdoaWNoIG1heSBiZSBpbmN1cnJlZCBhcyBhIHJlc3VsdCBvZiB0aGUgYXZhaWxhYmlsaXR5IG9yIHVuYXZhaWxhYmlsaXR5IG9mIHRoZSBFeHRlcm5hbCBTaXRlcywgb3IgYXMgYSByZXN1bHQgb2YgYW55IHJlbGlhbmNlIHBsYWNlZCBieSB5b3UgdXBvbiB0aGUgY29tcGxldGVuZXNzLCBhY2N1cmFjeSBvciBleGlzdGVuY2Ugb2YgYW55IGFkdmVydGlzaW5nLCBwcm9kdWN0cyBvciBvdGhlciBtYXRlcmlhbHMgb24sIG9yIG1hZGUgYXZhaWxhYmxlIGZyb20sIGFueSBFeHRlcm5hbCBTaXRlcy4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJjaGFuZ2VzLXRvLXRoZS10ZXJtcyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2NoYW5nZXMtdG8tdGhlLXRlcm1zIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIENoYW5nZXMgdG8gdGhlIFRlcm1zIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiV2UgbWF5IG1ha2UgY2hhbmdlcyB0byB0aGUgVGVybXMgZnJvbSB0aW1lIHRvIHRpbWUuXG5QbGVhc2UgY2hlY2sgdGhlc2UgVGVybXMgcGVyaW9kaWNhbGx5IGZvciBjaGFuZ2VzLiBBbnkgY2hhbmdlcyB0byB0aGUgVGVybXMgd2lsbCBhcHBseSBvbiB0aGUgZGF0ZSB0aGF0IHRoZXkgYXJlIG1hZGUsIGFuZCB5b3VyIGNvbnRpbnVlZCBhY2Nlc3MgdG8gb3IgdXNlIG9mIHRoZSBBcHAgYWZ0ZXIgdGhlIFRlcm1zIGhhdmUgYmVlbiB1cGRhdGVkIHdpbGwgY29uc3RpdHV0ZSB5b3VyIGJpbmRpbmcgYWNjZXB0YW5jZSBvZiB0aGUgdXBkYXRlcy5cbklmIHlvdSBkbyBub3QgYWdyZWUgdG8gYW55IHJldmlzZWQgVGVybXMsIHlvdSBtYXkgbm90IGFjY2VzcyBvciB1c2UgdGhlIEFwcC4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJjaGFuZ2VzLXRvLXRoZS1hcHAifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNjaGFuZ2VzLXRvLXRoZS1hcHAifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgQ2hhbmdlcyB0byB0aGUgQXBwIildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiV2UgYXJlIGNvbnN0YW50bHkgaW5ub3ZhdGluZyB0aGUgQXBwIHRvIGhlbHAgcHJvdmlkZSB0aGUgYmVzdCBwb3NzaWJsZSBleHBlcmllbmNlLiBZb3UgYWNrbm93bGVkZ2UgYW5kIGFncmVlIHRoYXQgdGhlIGZvcm0gYW5kIG5hdHVyZSBvZiB0aGUgQXBwLCBhbmQgYW55IHBhcnQgb2YgaXQsIG1heSBjaGFuZ2UgZnJvbSB0aW1lIHRvIHRpbWUgd2l0aG91dCBwcmlvciBub3RpY2UgdG8geW91LCBhbmQgdGhhdCB3ZSBtYXkgYWRkIG5ldyBmZWF0dXJlcyBhbmQgY2hhbmdlIGFueSBwYXJ0IG9mIHRoZSBBcHAgYXQgYW55IHRpbWUgd2l0aG91dCBub3RpY2UuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZXh0ZW5kZWQtdGVybXMtYW5kLWNvbmRpdGlvbnMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNleHRlbmRlZC10ZXJtcy1hbmQtY29uZGl0aW9ucyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBFeHRlbmRlZCBUZXJtcyBhbmQgQ29uZGl0aW9ucyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlJlYWQgb3VyICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly92aXR0b21pbmFjb3JpLmdpdGh1Yi5pby90ZXJtcyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiVGVybXMgYW5kIENvbmRpdGlvbnMiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpLF92bS5fdigiIHdoaWNoIGFyZSBoZXJlYnkgaW5jb3Jwb3JhdGVkIGluIHRoZXNlIHRlcm1zIGJ5IHJlZmVyZW5jZS4iKV0pLF92bS5fdigiICIpLF9jKCdoMicse2F0dHJzOnsiaWQiOiJwcml2YWN5LXBvbGljeSJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI3ByaXZhY3ktcG9saWN5In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFByaXZhY3kgUG9saWN5IildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoid2hhdC1pbmZvcm1hdGlvbi1kby13ZS1jb2xsZWN0In19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjd2hhdC1pbmZvcm1hdGlvbi1kby13ZS1jb2xsZWN0In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFdoYXQgaW5mb3JtYXRpb24gZG8gd2UgY29sbGVjdD8iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJXaGVuIHlvdSBidWlsZCBhIEJFUDIwIHlvdSBhcmUgcHJvbXB0ZWQgdG8gZW50ZXIgVG9rZW4gTmFtZSBhbmQgU3ltYm9sLCB0aGUgZGVjaW1hbHMgYW1vdW50IGFuZCBUb2tlbiBzdXBwbHkuXG5UaGUgYWJvdmUgaW5mb3JtYXRpb25zIGFyZSBzdG9yZWQgaW4gdGhlIEJpbmFuY2UgU21hcnQgQ2hhaW4gYXMgYSByZXF1aXJlbWVudCBmb3IgeW91ciBCRVAyMCB0byB3b3JrLlxuV2UgZG8gbm90IGNvbGxlY3QgeW91ciB3YWxsZXQgYWRkcmVzcyBidXQgeW91IG9ubHkgdXNlIGl0IHRvIGNyZWF0ZSB0aGUgQkVQMjAgVG9rZW4gb24gdGhlIGJsb2NrY2hhaW4uIFNvLCB3YWxsZXQgYWRkcmVzc2VzIGFyZSB2aXNpYmxlIG9uIHRoZSBibG9ja2NoYWluIHVzaW5nIHdoYXRldmVyIGV4cGxvcmVyIHlvdSB3YW50IHNvLCBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgYmxvY2tjaGFpbiwgeW91IGFscmVhZHkga25vdyB0aGF0IHdlIGNhbm5vdCBoaWRlIHRoZXNlIGRhdGEuXG5JbiB0aGUgZW5kIHRoZSBnb29kIG5ld3MgaXMgdGhhdCB3ZSBkbyBub3QgY29sbGVjdCBhbnl0aGluZyBmcm9tIHRoZSBhYm92ZSBkYXRhLlxuV2Ugd2lsbCBuZXZlciBhc2sgeW91IHRvIHNoYXJlIHlvdXIgcHJpdmF0ZSBrZXlzLlxuV2UgbWF5IGNvbGxlY3QgZGF0YSBhYm91dCB5b3VyIGRldmljZSBhbmQgaG93IHlvdSBhbmQgeW91ciBkZXZpY2UgaW50ZXJhY3Qgd2l0aCBvdXIgQXBwLiBXZSBtYXkgYWxzbyBjb2xsZWN0IGRhdGEgYWJvdXQgeW91ciBkZXZpY2UgYW5kIHRoZSBuZXR3b3JrIHlvdSB1c2UgdG8gY29ubmVjdCB0byBvdXIgQXBwOyB0aGlzIG1heSBpbmNsdWRlIGRhdGEgc3VjaCBhcyBicm93c2VyIHR5cGUsIG9wZXJhdGluZyBzeXN0ZW0sIGFuZCByZWZlcnJpbmcgVVJMcy4gRGF0YSBhcmUgYW5vbnltaXplZCwgd2UgZG8gbm90IGNvbGxlY3QgeW91ciBJUCBhbmQgZXZlcnl0aGluZyBpcyBkZWxldGVkIGFmdGVyIDI2IG1vbnRocyBzbywgZG8gbm90IHdvcnJ5IGFib3V0IHlvdXIgZGF0YS4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJ3aGF0LWRvLXdlLXVzZS15b3VyLWluZm9ybWF0aW9uLWZvciJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI3doYXQtZG8td2UtdXNlLXlvdXItaW5mb3JtYXRpb24tZm9yIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIFdoYXQgZG8gd2UgdXNlIHlvdXIgaW5mb3JtYXRpb24gZm9yPyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIldlIHVzZSB0aGUgZGF0YSB3ZSBjb2xsZWN0IHRvIG9wZXJhdGUgb3VyIGJ1c2luZXNzLCBhbmQgdG8gbWFrZSB0aGUgQXBwIGF2YWlsYWJsZSB0byB5b3UuIFRoaXMgaW5jbHVkZXMgdXNpbmcgdGhlIGRhdGEgdG8gaW1wcm92ZSBvdXIgQXBwLCBhbmQgdG8gcGVyc29uYWxpemUgeW91ciBleHBlcmllbmNlcy4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJob3ctZG8td2UtcHJvdGVjdC15b3VyLWluZm9ybWF0aW9uIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjaG93LWRvLXdlLXByb3RlY3QteW91ci1pbmZvcm1hdGlvbiJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBIb3cgZG8gd2UgcHJvdGVjdCB5b3VyIGluZm9ybWF0aW9uPyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIldlIGltcGxlbWVudCBhIHZhcmlldHkgb2Ygc2VjdXJpdHkgbWVhc3VyZXMgdG8gbWFpbnRhaW4gdGhlIHNhZmV0eSBvZiB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uIHdoZW4geW91IGVudGVyLCBzdWJtaXQsIG9yIGFjY2VzcyB5b3VyIHBlcnNvbmFsIGluZm9ybWF0aW9uLiBXZSBvZmZlciB0aGUgdXNlIG9mIGEgc2VjdXJlIHNlcnZlci4gQWxsIHN1cHBsaWVkIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbiBpcyB0cmFuc21pdHRlZCB2aWEgU2VjdXJlIFNvY2tldCBMYXllciAoU1NMKSB0ZWNobm9sb2d5LiIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6Imhvdy1kby13ZS1lbnN1cmUtdGhhdC1vdXItcHJvY2Vzc2luZy1zeXN0ZW1zLXJlbWFpbi1jb25maWRlbnRpYWwtcmVzaWxpZW50LWFuZC1hdmFpbGFibGUifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNob3ctZG8td2UtZW5zdXJlLXRoYXQtb3VyLXByb2Nlc3Npbmctc3lzdGVtcy1yZW1haW4tY29uZmlkZW50aWFsLXJlc2lsaWVudC1hbmQtYXZhaWxhYmxlIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEhvdyBkbyB3ZSBlbnN1cmUgdGhhdCBvdXIgcHJvY2Vzc2luZyBzeXN0ZW1zIHJlbWFpbiBjb25maWRlbnRpYWwsIHJlc2lsaWVudCwgYW5kIGF2YWlsYWJsZT8iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJXZSBpbXBsZW1lbnQgYSB2YXJpZXR5IG9mIG1lYXN1cmVzIHRvIGVuc3VyZSB0aGF0IG91ciBwcm9jZXNzaW5nIHN5c3RlbXMgcmVtYWluIGNvbmZpZGVudGlhbCwgcmVzaWxpZW50LCBhbmQgYXZhaWxhYmxlLiBCRVAyMCBUb2tlbiBHZW5lcmF0b3IgaXMgaG9zdGVkIG9uIEdpdEh1YiBQYWdlcy4iKV0pLF92bS5fdigiICIpLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIn0sW19jKCdwcmUnLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoibGFuZ3VhZ2UtdGV4dCJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoIkdpdEh1YiBQYWdlcyBpcyBhIHN0YXRpYyBzaXRlIGhvc3Rpbmcgc2VydmljZSBkZXNpZ25lZCB0byBob3N0IHlvdXIgcGVyc29uYWwsIG9yZ2FuaXphdGlvbiwgb3IgcHJvamVjdCBwYWdlcyBkaXJlY3RseSBmcm9tIGEgR2l0SHViIHJlcG9zaXRvcnkuIEhUVFBTIGVuZm9yY2VtZW50IGlzIHJlcXVpcmVkIGZvciBHaXRIdWIgUGFnZXMgc2l0ZXMgdXNpbmcgYSBnaXRodWIuaW8gZG9tYWluIHRoYXQgd2VyZSBjcmVhdGVkIGFmdGVyIEp1bmUgMTUsIDIwMTYuIEhUVFBTIGFkZHMgYSBsYXllciBvZiBlbmNyeXB0aW9uIHRoYXQgcHJldmVudHMgb3RoZXJzIGZyb20gc25vb3Bpbmcgb24gb3IgdGFtcGVyaW5nIHdpdGggdHJhZmZpYyB0byB5b3VyIHNpdGUuIFlvdSBjYW4gZW5mb3JjZSBIVFRQUyBmb3IgeW91ciBHaXRIdWIgUGFnZXMgc2l0ZSB0byB0cmFuc3BhcmVudGx5IHJlZGlyZWN0IGFsbCBIVFRQIHJlcXVlc3RzIHRvIEhUVFBTLlxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoIkJ5IHVzaW5nIEdpdEh1YiBQYWdlcyB3ZSBndWFyYW50ZWUgdGhhdCB0aGUgY29kZSB5b3UgYXJlIHVzaW5nIGlzIGV4YWN0bHkgdGhlIGNvZGUgc3RvcmVkIGluIG91ciByZXBvc2l0b3J5LiBXZSBjYW5ub3QgZnJhdWQuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZG8td2UtdXNlLWNvb2tpZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNkby13ZS11c2UtY29va2llcyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBEbyB3ZSB1c2UgY29va2llcz8iKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJXZSB1c2UgR29vZ2xlIEFuYWx5dGljcyBhbmQgRmFjZWJvb2sgUGl4ZWwuIFRoZXkgbWF5IHN0b3JlIHNvbWUgY29va2llcy5cbkFsbCB0aGUgZGF0YSB3ZSBjb2xsZWN0IGFyZSBhbm9ueW1vdXMgYW5kIG5vdCB1c2VyLXNwZWNpZmljLlxuV2UgZG8gbm90IHVzZSBhbnkgb3RoZXIgY29va2llLlxuWW91IG1heSByZWZ1c2UgdG8gYWNjZXB0IGNvb2tpZXMgYnkgYWN0aXZhdGluZyB0aGUgc2V0dGluZyBvbiB5b3VyIGJyb3dzZXIgdGhhdCBhbGxvd3MgeW91IHRvIHJlZnVzZSB0aGUgc2V0dGluZyBvZiBjb29raWVzLiIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImRvLXdlLWRpc2Nsb3NlLWFueS1pbmZvcm1hdGlvbi10by1vdXRzaWRlLXBhcnRpZXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNkby13ZS1kaXNjbG9zZS1hbnktaW5mb3JtYXRpb24tdG8tb3V0c2lkZS1wYXJ0aWVzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIERvIHdlIGRpc2Nsb3NlIGFueSBpbmZvcm1hdGlvbiB0byBvdXRzaWRlIHBhcnRpZXM/IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiT2J2aW91c2x5IG5vdC4gV2UgZG8gbm90IGhhdmUgaW5mb3JtYXRpb24gYXMgZXhwbGFpbmVkIGFib3ZlLiIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6InRoaXJkLXBhcnR5LWxpbmtzIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjdGhpcmQtcGFydHktbGlua3MifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgVGhpcmQgUGFydHkgTGlua3MiKV0pLF92bS5fdigiICIpLF9jKCdwJyxbX3ZtLl92KCJPY2Nhc2lvbmFsbHksIGF0IG91ciBkaXNjcmV0aW9uLCB3ZSBtYXkgaW5jbHVkZSBvciBvZmZlciB0aGlyZCBwYXJ0eSBwcm9kdWN0cyBvciBzZXJ2aWNlcyBvbiBvdXIgd2Vic2l0ZSBvciB0aHJvdWdoIG91ciBBcHAuXG5JZiB5b3UgYWNjZXNzIG90aGVyIHdlYnNpdGVzIHVzaW5nIHRoZSBsaW5rcyBwcm92aWRlZCwgdGhlIG9wZXJhdG9ycyBvZiB0aGVzZSB3ZWJzaXRlcyBtYXkgY29sbGVjdCBpbmZvcm1hdGlvbiBmcm9tIHlvdSB0aGF0IHdpbGwgYmUgdXNlZCBieSB0aGVtIGluIGFjY29yZGFuY2Ugd2l0aCB0aGVpciBwcml2YWN5IHBvbGljaWVzLlxuVGhlc2UgdGhpcmQgcGFydHkgc2l0ZXMgaGF2ZSBzZXBhcmF0ZSBhbmQgaW5kZXBlbmRlbnQgcHJpdmFjeSBwb2xpY2llcy4gV2UsIHRoZXJlZm9yZSwgaGF2ZSBubyByZXNwb25zaWJpbGl0eSBvciBsaWFiaWxpdHkgZm9yIHRoZSBjb250ZW50IGFuZCBhY3Rpdml0aWVzIG9mIHRoZXNlIGxpbmtlZCBzaXRlcy5cbk5vbmV0aGVsZXNzLCB3ZSBzZWVrIHRvIHByb3RlY3QgdGhlIGludGVncml0eSBvZiBvdXIgc2l0ZSBhbmQgd2VsY29tZSBhbnkgZmVlZGJhY2sgYWJvdXQgdGhlc2Ugc2l0ZXMuIildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiY2hhbmdlcy10by1vdXItcHJpdmFjeS1wb2xpY3kifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNjaGFuZ2VzLXRvLW91ci1wcml2YWN5LXBvbGljeSJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBDaGFuZ2VzIHRvIG91ciBQcml2YWN5IFBvbGljeSIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIldlIHdpbGwgdXBkYXRlIHRoaXMgcHJpdmFjeSBzdGF0ZW1lbnQgd2hlbiBuZWNlc3NhcnkgdG8gcmVmbGVjdCBjdXN0b21lciBmZWVkYmFjayBhbmQgY2hhbmdlcyB0byBvdXIgQXBwLlxuSWYgdGhlcmUgYXJlIG1hdGVyaWFsIGNoYW5nZXMgdG8gdGhlIHN0YXRlbWVudCBvciBpbiBob3cgb3VyIEFwcCB3aWxsIHVzZSB5b3VyIHBlcnNvbmFsIGRhdGEsIHdlIHdpbGwgbm90aWZ5IHlvdSBlaXRoZXIgYnkgcHJvbWluZW50bHkgcG9zdGluZyBhIG5vdGljZSBvZiBzdWNoIGNoYW5nZXMgYmVmb3JlIHRoZXkgdGFrZSBlZmZlY3QuXG5XZSBlbmNvdXJhZ2UgeW91IHRvIHBlcmlvZGljYWxseSByZXZpZXcgdGhpcyBwcml2YWN5IHN0YXRlbWVudCB0byBsZWFybiBob3cgQkVQMjAgVG9rZW4gR2VuZXJhdG9yIGlzIHByb3RlY3RpbmcgeW91ciBpbmZvcm1hdGlvbi4iKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJleHRlbmRlZC1wcml2YWN5LXBvbGljeSJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2V4dGVuZGVkLXByaXZhY3ktcG9saWN5In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEV4dGVuZGVkIFByaXZhY3kgUG9saWN5IildKSxfdm0uX3YoIiAiKSxfYygncCcsW192bS5fdigiUmVhZCBvdXIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3ZpdHRvbWluYWNvcmkuZ2l0aHViLmlvL3ByaXZhY3kvIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJQcml2YWN5IFBvbGljeSIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSksX3ZtLl92KCIgd2hpY2ggaXMgaGVyZWJ5IGluY29ycG9yYXRlZCBpbiB0aGVzZSB0ZXJtcyBieSByZWZlcmVuY2UuIildKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoiaG93LXRvLWNvbnRhY3QtdXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNob3ctdG8tY29udGFjdC11cyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBIb3cgdG8gQ29udGFjdCBVcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIklmIHlvdSBoYXZlIGEgdGVjaG5pY2FsIG9yIHN1cHBvcnQgcXVlc3Rpb24sIGEgcHJpdmFjeSBjb25jZXJuLCBjb21wbGFpbnQsIG9yIGFueSB0eXBlIG9mIHF1ZXN0aW9uLCBwbGVhc2Ugb3BlbiBhbiBpc3N1ZSAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS92aXR0b21pbmFjb3JpL3Rva2VuLWdlbmVyYXRvci9pc3N1ZXMiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoImhlcmUiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpLF92bS5fdigiIG9yIHNlbmQgYSBQTSB0byAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vdHdpdHRlci5jb20vRXJjMjBHZW5lcmF0b3IiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoIkBFcmMyMEdlbmVyYXRvciIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSksX3ZtLl92KCIuIildKV0pfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}