{"remainingRequest":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\@vuepress\\markdown-loader\\index.js??ref--1-2!C:\\Users\\shop\\Documents\\GitHub\\token-generator\\routes\\terms\\erc20-generator-terms.md?vue&type=template&id=22bc3d0f&","dependencies":[{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\routes\\terms\\erc20-generator-terms.md","mtime":1638045277244},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\shop\\Documents\\GitHub\\token-generator\\node_modules\\@vuepress\\markdown-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}